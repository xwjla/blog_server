#!/usr/bin/env node

/**
 * Module dependencies.
 */

var app = require('../app');
var debug = require('debug')('demo:server');
var http = require('http');

const socketIo = require('../server/utils/socket')

//io.set('origins', '*:*');
//io.set('transports', ['websocket', 'xhr-polling', 'jsonp-polling', 'htmlfile', 'flashsocket']);

/**
 * Get port from environment and store in Express.
 */

var port = normalizePort(process.env.PORT || '3003');
// app.set('port', port);

/**
 * Create HTTP server.
 */

var server = http.createServer(app.callback());

/**
 * Listen on provided port, on all network interfaces.
 */

server.listen(port);
server.on('error', onError);
server.on('listening', onListening);

/*const io = require('socket.io')(server,{
  origins: '*:*',
  transports:['websocket', 'xhr-polling']
});*/

socketIo.getSocketio(server)


/*io.on('connection', function(socket) {

  console.log('a user connected');
  socket.on('new message', function (id,data) {
    // 广播给用户执行“new message”
    console.log(data)
    socket.emit('new message', {b:1});
  });

  // 当客户端发出“add user”时，服务端监听到并执行相关代码
  socket.on('add user', function (username) {
    socket.username = username;
    //服务端告诉当前用户执行'login'指令
    socket.emit('login', {});
  });

  // 当用户断开时执行此指令
  socket.on('disconnect', function () {});
})*/

/**
 * Normalize a port into a number, string, or false.
 */

function normalizePort(val) {
  var port = parseInt(val, 10);

  if (isNaN(port)) {
    // named pipe
    return val;
  }

  if (port >= 0) {
    // port number
    return port;
  }

  return false;
}

/**
 * Event listener for HTTP server "error" event.
 */

function onError(error) {
  if (error.syscall !== 'listen') {
    throw error;
  }

  var bind = typeof port === 'string'
    ? 'Pipe ' + port
    : 'Port ' + port;

  // handle specific listen errors with friendly messages
  switch (error.code) {
    case 'EACCES':
      console.error(bind + ' requires elevated privileges');
      process.exit(1);
      break;
    case 'EADDRINUSE':
      console.error(bind + ' is already in use');
      process.exit(1);
      break;
    default:
      throw error;
  }
}

/**
 * Event listener for HTTP server "listening" event.
 */

function onListening() {
  var addr = server.address();
  var bind = typeof addr === 'string'
    ? 'pipe ' + addr
    : 'port ' + addr.port;
  debug('Listening on ' + bind);
}
